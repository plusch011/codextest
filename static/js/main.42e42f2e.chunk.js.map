{"version":3,"sources":["components/inputSection.jsx","components/outputSection.jsx","ultils/drawApi.js","ultils/Compilator.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","display","flexWrap","button","margin","spacing","textField","marginLeft","marginRight","InputSection","handleInputChange","handleFileLoad","instructions","handleRun","classes","className","InputFiles","onChange","accept","Button","variant","color","onClick","TextField","id","label","multiline","rows","value","typography","fontFamily","OutputSection","handleSaveFile","disabled","DrawApi","this","width","height","cnv","col","Array","fill","from","_","x1","y1","x2","y2","i","x","y","startColor","stack","length","coords","pop","push","line","renderCnv","el","forEach","row","unshift","reduce","result","join","Compilator","draw","str","split","map","trim","instruction","args","slice","createCanvas","render","rectangle","bucketFill","parseString","perform","reader","FileReader","compilator","root","padding","background","defaultState","input","output","App","useState","state","setState","onload","Paper","file","e","readAsText","nativeEvent","target","compile","Blob","type","a","document","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42e42f2e.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputFiles from 'react-input-files';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n}));\n\n\nexport default function InputSection({ handleInputChange, handleFileLoad, instructions, handleRun }) {\n  const classes = useStyles();\n\n  return (\n    <div className='input-section'>\n\n      <div className='input-buttons'>\n        <InputFiles\n          onChange={handleFileLoad}\n          accept=\"*\">\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            className={classes.button}>\n            Load instructions\n          </Button>\n        </InputFiles>\n        <Button\n          onClick={handleRun}\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={classes.button}>\n          Run\n        </Button>\n      </div>\n\n      <TextField\n        id=\"outlined-multiline-static\"\n        label=\"Instructions\"\n        multiline\n        rows=\"30\"\n        className={classes.textField + ' code'}\n        margin=\"normal\"\n        variant=\"outlined\"\n        value={instructions}\n        onChange={handleInputChange}\n      >\n      </TextField>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    typography: {\n      fontFamily: 'source-code-pro'\n    }\n  }\n}));\n\nexport default function OutputSection({ display, handleSaveFile }) {\n  const classes = useStyles();\n\n  return (\n    <div className='output-section'>\n\n      <div className='output-buttons'>\n        <Button\n          onClick={handleSaveFile}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}>\n          Save to File.txt\n        </Button>\n      </div>\n\n      <TextField\n        disabled\n        id=\"outlined-multiline-static\"\n        label=\"Output display\"\n        multiline\n        rows=\"30\"\n        className={classes.textField + 'code'}\n        margin=\"normal\"\n        variant=\"outlined\"\n        value={ display }\n      />\n\n    </div>\n  );\n}","class DrawApi {\n  constructor() {\n    this.width = null;\n    this.height = null;\n    this.cnv = null;\n  }\n\n  createCanvas(width, height) {\n    const col = Array(height).fill(' ');\n    this.cnv = Array.from(col, _ => Array(width).fill(' '));\n    this.width = width;\n    this.height = height;\n  }\n\n  line(x1, y1, x2, y2) {\n    if(x1 - x2) {\n\n      if(x1 > x2) {\n        [x1, x2] = [x2, x1];\n      }\n\n      for(let i = x1; i <= x2; i++) {\n        if(!this.cnv[y1] || !this.cnv[y1][i]) {\n          continue\n        }\n        this.cnv[y1][i] = 'x';\n      }\n\n    } else {\n\n      if(y1 > y2) {\n        [y1, y2] = [y2, y1];\n      }\n\n      for(let i = y1; i <= y2; i++) {\n        if(!this.cnv[i] || !this.cnv[i][x1]) {\n          continue\n        }\n        this.cnv[i][x1] = 'x';\n      }\n\n    }\n  }\n\n\n  bucketFill(x, y, color) {\n    if(!this.cnv[y] || !this.cnv[y][x]) {\n      return;\n    }\n\n    const startColor = this.cnv[y][x];\n\n    const stack = [{ x, y }];\n\n    while(stack.length) {\n      const coords = stack.pop();\n      const { x, y } = coords;\n\n      if(!this.cnv[y] || !this.cnv[y][x]) {\n        continue;\n      }\n\n      if(this.cnv[y][x] === startColor) {\n        this.cnv[y][x] = color;\n        stack.push(\n          { x: x - 1, y: y },\n          { x: x + 1, y: y },\n          { x: x, y: y - 1 },\n          { x: x, y: y + 1 });\n      }\n    }\n  }\n\n  rectangle(x1, y1, x2, y2) {\n    this.line(x1,y1,x2,y1);\n    this.line(x1,y2,x2,y2);\n    this.line(x1,y1,x1,y2);\n    this.line(x2,y1,x2,y2);\n  }\n\n  render() {\n    const renderCnv = Array.from(this.cnv, el => Array.from(el));\n\n    renderCnv.forEach(row => {\n      row.push('|');\n      row.unshift('|');\n    });\n\n    renderCnv.push(Array(this.width + 2).fill('-'));\n    renderCnv.unshift(Array(this.width + 2).fill('-'));\n\n    const result = renderCnv.reduce((result, row) => {\n      return `${result}${row.join('')}\\n`\n    }, '');\n\n    return result;\n  }\n}\n\nexport default DrawApi;","import DrawApi from \"./drawApi\";\n\nexport default class Compilator {\n  constructor() {\n    this.draw = new DrawApi();\n    this.instructions = null;\n  }\n\n  parseString(str) {\n    this.instructions = str.split('\\n')\n      .map(el => el.trim().split(' '));\n  }\n\n  perform(instruction) {\n    const args = instruction.slice(1);\n    switch(instruction[0]) {\n      case 'C':\n        this.draw.createCanvas(...args.map(x => +x));\n\n        return this.draw.render();\n        break;\n\n      case 'L':\n        if(!this.draw.cnv) {\n          return 'Error: cnv doesnt exists';\n        }\n\n        this.draw.line(...args.map(x => +x));\n\n        return this.draw.render();\n        break;\n\n      case 'R':\n        if(!this.draw.cnv) {\n          return 'Error: cnv doesnt exists';\n        }\n\n        this.draw.rectangle(...args.map(x => +x));\n\n        return this.draw.render();\n        break;\n\n      case 'B':\n        if(!this.draw.cnv) {\n          return 'Error: cnv doesnt exists';\n        }\n\n        this.draw.bucketFill(+args[0], +args[1], args[2]);\n\n        return this.draw.render();\n        break;\n\n      case '':\n        return '';\n\n      default:\n        return 'Argument Error';\n    }\n  }\n\n  compile(str) {\n    this.parseString(str);\n\n    const result = this.instructions\n      .reduce((result, instruction) => `${result}${this.perform(instruction)}`, '');\n\n    this.draw.cnv = null;\n\n    return result;\n  }\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport InputSection from \"./components/inputSection\";\nimport OutputSection from \"./components/outputSection\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Compilator from './ultils/Compilator';\n\nconst reader = new FileReader();\nconst compilator = new Compilator();\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    display: 'flex',\n    background: '#efefef',\n  },\n}));\n\nconst defaultState = {\n  input: null,\n  output: null,\n  instructions: 'C 20 4',\n  display: `----------------------\n|                    |\n|                    |\n|                    |\n|                    |\n----------------------`\n};\n\nfunction App() {\n  const [ state, setState ] = useState(defaultState);\n  const classes = useStyles();\n\n  reader.onload = () => {\n    setState( { ...state, instructions: reader.result });\n  };\n\n  const handleInputChange = e => {\n    const instructions = e.nativeEvent.target.value;\n\n    setState({...state, instructions});\n  };\n\n  const handleFileLoad = (file, e) => {\n    reader.readAsText(file[0]);\n\n    e.nativeEvent.target.value = '';\n  };\n\n  const handleSaveFile = () => {\n    const file = new Blob([state.display], {type: 'txt'});\n\n    const a = document.createElement(\"a\"),\n\n    url = URL.createObjectURL(file);\n    a.href = url;\n    a.download = 'output';\n    document.body.appendChild(a);\n    a.click();\n\n    setTimeout(function() {\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, 0);\n  }\n\n  const handleRun = () => {\n    const result = compilator.compile(state.instructions);\n\n    setState({...state, display: result ? result : 'Render error'});\n  };\n\n  return (\n    <div className=\"App\">\n      <Paper className={classes.root}>\n        <InputSection handleFileLoad={handleFileLoad}\n                      handleInputChange={handleInputChange}\n                      handleRun={handleRun}\n                      instructions={state.instructions}/>\n        <OutputSection display={state.display}\n                       handleSaveFile={handleSaveFile}/>\n      </Paper>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}